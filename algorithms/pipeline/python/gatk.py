#!/usr/bin/env python
"""Wrapper for the GATK variant calling pipeline.

Issues:
- performs realignment if the .intervals file is empty
"""
import os
import sys
from runner import Runner

class GATK(Runner):

    def __init__(self, configFile):
        Runner.__init__(self)
        
        self._chrom = []
        
        self.loadConfig(configFile)
        
        self.logger.info("GATK Runner created.")
        
    def setChrom(self, chrom):
        self._chrom = ["-L", chrom]
        
    def fastRealign(self, reference, inFile, outFile, recalFile):
        ''' Runs Fast Realigner from the modified GATK.
        
        Fast Realigner combines the Realigner Target Creator, Indel Realigner,
        and Count Covariates steps from the standard GATK. Requires a name for
        the recalibration file generated by the count covariates step.
        '''
        
        self.logger.info("Fast Realigning '" + inFile + "'.")
        
        requiredArgs = [
             "-T", "FastRealign",
             "-R", reference,
             "-I", inFile,
             "-o", outFile,
             "-knownSites", self._dbsnp,
             "-recalFile", recalFile
            ] + self._chrom
        
        self.run(self._fastRealigner, requiredArgs, self.getArgs("fastRealign"))
        self.checkFile(outFile)
        self.checkFile(recalFile)
        
    def realign(self, reference, inFile, outFile, intervalsFile):
        ''' Runs realignment from the standard GATK.
        
        Requires a name for the intervals file generated by Realigner Target Creator
        and consumed by Indel Realigner.
        '''
        
        self.logger.info("Realigning '" + inFile + "'.")
        
        # Realigner Target Creator
        requiredArgs = [
             "-T", "RealignerTargetCreator",
             "-R", reference,
             "-I", inFile,
             "-o", intervalsFile,
             "-et", self._et,
             "-nt", str(self._numThreads)
            ] + self._chrom

        self.run(self._gatk, requiredArgs, self.getArgs('realignerTargetCreator'))
        self.checkFile(intervalsFile)
        
        # Indel Realigner
        requiredArgs = [
             "-T", "IndelRealigner",
             "-R", reference,
             "-I", inFile,
             "-o", outFile,
             "-targetIntervals", intervalsFile,
             "-et", self._et
            ] + self._chrom
        self.run(self._gatk, requiredArgs, self.getArgs('indelRealigner'))
        self.checkFile(outFile)
        
    def countCovariates(self, reference, inFile, recalFile):
        ''' Runs covariate counting from the standard GATK.
        
        Requires a name for the recalibration file to be used in table recalibration.
        '''
        
        self.logger.info("Counting Covariates in '" + inFile + "'.")
        
        requiredArgs = [
             "-T", "CountCovariates",
             "-R", reference,
             "-I", inFile,
             "-knownSites", self._dbsnp,
             "-recalFile", recalFile,
             "-et", self._et,
             "-nt", str(self._numThreads)
            ] + self._chrom
        
        self.run(self._gatk, requiredArgs, self.getArgs('countCovariates'))
        self.checkFile(recalFile)
        
    def tableRecalibration(self, reference, inFile, outFile, recalFile):
        ''' Runs table recalibration from the standard GATK.
        '''
        
        self.logger.info("Recalibrating table in '" + inFile + "'.")
          
        requiredArgs = [
             "-T", "TableRecalibration",
             "-R", reference,
             "-I", inFile,
             "-o", outFile,
             "-recalFile", recalFile,
             "-et", self._et
            ] + self._chrom
        
        self.run(self._gatk, requiredArgs, self.getArgs('tableRecalibration'))
        self.checkFile(outFile)
        
    def callVariants(self, reference, inFile, outFile):
        ''' Runs variant calling from the standard GATK.
        '''
        
        self.logger.info("Performing variant calling on '" + inFile + "'.")
          
        requiredArgs = [
            "-T", "UnifiedGenotyper",
            "-R", reference,
            "-I", inFile,
            "-o", outFile,
            "-D", self._dbsnp,
            "-et", self._et,
            "-nt", str(self._numThreads),
            "-S", self._validation
            ] + self._chrom
          
        self.run(self._gatk, requiredArgs, self.getArgs('callVariants'))
        self.checkFile(outFile)
        
    def combinedGenotyper(self, reference, inFile, outFile, recalFile):
        ''' Runs table recalibration and variant calling from the modified GATK.
        
        Combined Genotyper combines the Table Recalibration and Unified Genotyper
        steps from the standard GATK. Requires a valid recalibration file generated
        by the count covariates or Fast Realigner steps.
        '''
        
        self.logger.info("Performing combined genotyping on '" + inFile + "'.")
          
        requiredArgs = [
             "-T", "CombinedGenotyper",
             "-R", reference,
             "-I", inFile,
             "-o", outFile,
             "-D", self._dbsnp,
             "-recalFile", recalFile,
             "-et", self._et,
             "-nt", str(self._numThreads),
             "-S", self._validation
            ] + self._chrom
        
        self.run(self._combinedGenotyper, requiredArgs, self.getArgs('callVariants'))
        self.checkFile(outFile)
        
    def loadConfig(self, configFile):
        
        Runner.loadConfig(self, configFile)
        
        # Get executables
        self._gatk = self._config['gatk']['executable']
        self.logger.info("GATK JAR file: '" + self._gatk + "'.")
        
        self._fastRealigner = self._config['gatk']['fastRealigner']
        self.logger.info("Fast-Realigner JAR file: '" + self._fastRealigner + "'.")
        
        self._combinedGenotyper = self._config['gatk']['combinedGenotyper']
        self.logger.info("Combined Genotyper JAR file: '" + self._combinedGenotyper + "'.")
        
        # Get files
        self._dbsnp = self._config['files']['dbsnp']

        # Genome Analysis Toolkit
        self._numThreads = self.getVal(self._config['gatk'], 'numThreads', 16)
        self.logger.info("Number of Threads: " + str(self._numThreads))
        
        self._et = self.getVal(self._config['gatk'], 'et', 'NO_ET')
        self.logger.info("Phone-Home Mode:   " + self._et)
    
    def getArgs(self, tool):
        ''' Extracts the specified tool's arguments and options from the config and returns it as
        a subprocess-executable list.
        
        Returns an empty list if the configuration file has no arguments or options for the specified tool.
        '''
        
        if 'gatk' in self._config:
            if tool in self._config['gatk']:
                entry = self._config['gatk'][tool]
                args = []
            
                if 'arguments' in entry:
                    args = entry['arguments']
                
                if 'options' in entry:
                    for opt in entry['options']:
                        args.extend([opt, str(entry['options'][opt])])
                
                return args
        
        # Entry not available; return empty array
        return []
        
